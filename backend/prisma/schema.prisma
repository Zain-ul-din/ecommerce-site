// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Auth {
  Google 
  Facebook
  Twitter
}

model User {
  id Int @id @default(autoincrement()) 
  createdAt String 
  updatedAt String 
  
  name String @db.VarChar(256) @default("NULL")
  email String @db.VarChar(256) @unique
  
  isActive Boolean @default(true)
  isAdmin  Boolean @default(false)
  isStuff Boolean @default(false)
  auth  Auth @default(Google)
  
  avatar String @db.MediumText
  
  // one to many
  reviews Review[]
  replies  Reply []
}

// Category Table
model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(256) 
  image String @db.LongText
  
  // @ Relations
  // one to many
  products Product[] 

  // many to one
  superCategoryName String @db.VarChar(256) 
  superCategory SuperCategory @relation(fields: [superCategory_id] , references: [id] , onDelete: Cascade , onUpdate: Cascade) 
  superCategory_id Int 
  
  @@unique([name , superCategoryName]) 
}

model SuperCategory {
  id Int @id @default(autoincrement())
  name String @db.VarChar(256) @unique
  image String @db.LongText
   
  // one to many
  categories Category[]
}

// Product Table
model Product {
  id Int @id @default(autoincrement())
  createdAt String 
  updatedAt String 

  name String @db.VarChar(256)

  price Decimal 
  description String @db.MediumText 
  
  image String @db.LongText
  brand String @db.VarChar(256)
  rating Float 
  
  countInStock Int @default(0)
  reviewsCount Int @default(0)
  veiws Int @default(0)
  
  categoryName String? @db.VarChar(256)
   
  tags String? @db.Text
  
  // @ Relations
  // many to one
  category Category @relation(fields: [category_id] , references: [id] , onDelete: Cascade , onUpdate: Cascade) 
  category_id Int

  // one to many
  reviews Review[] 

}

// Review Table
model Review {
  id Int @id @default(autoincrement())
  createdAt String 
  updatedAt String 
  
  rating Float 
  comment String @db.Text
  
  userName String?
  
  // @ Relations
  // many to one
  user_id Int 
  product_id Int
  
  product Product @relation(fields: [product_id] , references: [id], onDelete: Cascade , onUpdate: Cascade)
  user User @relation(fields : [user_id] , references:[id] , onDelete: Cascade , onUpdate: Cascade)
  
  // one to many
  replies Reply[]
  
  @@unique([id ,user_id , product_id])
}

// Reply Table
model Reply {
  id Int @id @default(autoincrement())
  createdAt String 
  updatedAt String 
  
  comment String @db.Text
  userName String? @db.VarChar(256)
  
  // many to one
  user User @relation (fields: [user_id] , references: [id] , onDelete: Cascade , onUpdate: Cascade)
  review Review @relation(fields : [review_id] , references: [id], onDelete: Cascade , onUpdate: Cascade)
  
  user_id Int
  review_id Int
  
  @@unique([id , user_id , review_id])
}


enum PaymentMethod {
  CashOnDelivery
}

enum OrderStatus {
  Pending 
  Approved
  Canceled
}

model OrderItem {
   id Int @id @default(autoincrement()) 
   qt Int 
   name String @db.VarChar (256) 
   price Decimal 
   product_id Int
   order_id Int
   totalBill Decimal
   order Order @relation(fields: [order_id] , references: [id])
}

model ShippingAddress {
  id Int @id @default(autoincrement())
  userName String @db.VarChar(256)
  address String @db.MediumText 
  postalCode  Int
  city String
  country String
  order Order[]
}

model Order {
   id Int @id @default(autoincrement())
   paymentMethod PaymentMethod 
   totalBill Decimal 
   tax Decimal @default(0)
   shippingPrice Decimal @default (0)
   isPaid Boolean @default (false)
   status OrderStatus @default(Pending)
   deliveredAt String 
   createdAt String 
   shippingAddress ShippingAddress @relation(fields: [shippingAddress_id] , references: [id])
   shippingAddress_id Int
   orderItems OrderItem []
}





